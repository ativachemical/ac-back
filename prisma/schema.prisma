datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id                         Int                          @id @default(autoincrement())
  product_title              String
  is_inactived               Boolean?                     @default(false)
  is_deleted                 Boolean?                     @default(false)
  comercial_name             String                       @default("")
  chemical_name              String                       @default("")
  function                   String                       @default("")
  application                String                       @default("")
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  product_images             ProductImage[]
  product_image_compacteds   ProductImageCompacted[]
  product_values             ProductValue[]
  product_specification_table ProductSpecificationTable[]
  product_topic_values       ProductTopicValue[]
}

model ProductImage {
  id           Int     @id @default(autoincrement())
  source_image Bytes
  product_id   Int
  product      Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductImageCompacted {
  id           Int     @id @default(autoincrement())
  source_image Bytes
  product_id   Int
  product      Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductEnumKey {
  id             Int           @id @default(autoincrement())
  key            String        @unique
  name           String
  description    String?
  product_values ProductValue[]
}

model ProductValue {
  id                  Int             @id @default(autoincrement())
  product_id          Int
  product_enum_key_id Int
  product_key_id      Int
  product             Product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_key         ProductKey      @relation(fields: [product_key_id], references: [id], onDelete: Cascade)
  product_enum_key    ProductEnumKey  @relation(fields: [product_enum_key_id], references: [id], onDelete: Cascade)

  @@unique([product_id, product_enum_key_id], map: "unique_product_segment_per_product")
}

model ProductKey {
  id                 Int           @id @default(autoincrement())
  key                String        @unique
  name               String
  description        String?
  product_values     ProductValue[]
}

model ProductTopicKey {
  id                 Int             @id @default(autoincrement())
  key                String          @unique
  name               String
  description        String?
  product_topic_values ProductTopicValue[]
}

model ProductTopicValue {
  id                   Int             @id @default(autoincrement())
  value                String
  product_id           Int
  product_topic_key_id Int
  product              Product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_topic_key    ProductTopicKey @relation(fields: [product_topic_key_id], references: [id], onDelete: Cascade)

  @@unique([product_id, product_topic_key_id], map: "unique_product_topic_per_product")
}

model ProductSpecificationTable {
  id         Int     @id @default(autoincrement())
  value      String
  name       String? @default("")
  product_id Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
